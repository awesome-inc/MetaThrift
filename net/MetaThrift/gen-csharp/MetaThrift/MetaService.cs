/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MetaThrift
{
  public partial class MetaService {
    public interface Iface {
      string getName();
      #if SILVERLIGHT
      IAsyncResult Begin_getName(AsyncCallback callback, object state);
      string End_getName(IAsyncResult asyncResult);
      #endif
      string getDisplayName();
      #if SILVERLIGHT
      IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state);
      string End_getDisplayName(IAsyncResult asyncResult);
      #endif
      string getDescription();
      #if SILVERLIGHT
      IAsyncResult Begin_getDescription(AsyncCallback callback, object state);
      string End_getDescription(IAsyncResult asyncResult);
      #endif
      void ping();
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state);
      void End_ping(IAsyncResult asyncResult);
      #endif
      List<MetaOperation> getOperations();
      #if SILVERLIGHT
      IAsyncResult Begin_getOperations(AsyncCallback callback, object state);
      List<MetaOperation> End_getOperations(IAsyncResult asyncResult);
      #endif
      MetaObject call(MetaOperation operation, MetaObject input);
      #if SILVERLIGHT
      IAsyncResult Begin_call(AsyncCallback callback, object state, MetaOperation operation, MetaObject input);
      MetaObject End_call(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getName(AsyncCallback callback, object state)
      {
        return send_getName(callback, state);
      }

      public string End_getName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getName();
      }

      #endif

      public string getName()
      {
        #if !SILVERLIGHT
        send_getName();
        return recv_getName();

        #else
        var asyncResult = Begin_getName(null, null);
        return End_getName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getName(AsyncCallback callback, object state)
      #else
      public void send_getName()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getName", TMessageType.Call, seqid_));
        getName_args args = new getName_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getName_result result = new getName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state)
      {
        return send_getDisplayName(callback, state);
      }

      public string End_getDisplayName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDisplayName();
      }

      #endif

      public string getDisplayName()
      {
        #if !SILVERLIGHT
        send_getDisplayName();
        return recv_getDisplayName();

        #else
        var asyncResult = Begin_getDisplayName(null, null);
        return End_getDisplayName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDisplayName(AsyncCallback callback, object state)
      #else
      public void send_getDisplayName()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Call, seqid_));
        getDisplayName_args args = new getDisplayName_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getDisplayName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDisplayName_result result = new getDisplayName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDisplayName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDescription(AsyncCallback callback, object state)
      {
        return send_getDescription(callback, state);
      }

      public string End_getDescription(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDescription();
      }

      #endif

      public string getDescription()
      {
        #if !SILVERLIGHT
        send_getDescription();
        return recv_getDescription();

        #else
        var asyncResult = Begin_getDescription(null, null);
        return End_getDescription(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDescription(AsyncCallback callback, object state)
      #else
      public void send_getDescription()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDescription", TMessageType.Call, seqid_));
        getDescription_args args = new getDescription_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getDescription()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDescription_result result = new getDescription_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDescription failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state)
      {
        return send_ping(callback, state);
      }

      public void End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ping();
      }

      #endif

      public void ping()
      {
        #if !SILVERLIGHT
        send_ping();
        recv_ping();

        #else
        var asyncResult = Begin_ping(null, null);
        End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state)
      #else
      public void send_ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getOperations(AsyncCallback callback, object state)
      {
        return send_getOperations(callback, state);
      }

      public List<MetaOperation> End_getOperations(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getOperations();
      }

      #endif

      public List<MetaOperation> getOperations()
      {
        #if !SILVERLIGHT
        send_getOperations();
        return recv_getOperations();

        #else
        var asyncResult = Begin_getOperations(null, null);
        return End_getOperations(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getOperations(AsyncCallback callback, object state)
      #else
      public void send_getOperations()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getOperations", TMessageType.Call, seqid_));
        getOperations_args args = new getOperations_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MetaOperation> recv_getOperations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getOperations_result result = new getOperations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOperations failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_call(AsyncCallback callback, object state, MetaOperation operation, MetaObject input)
      {
        return send_call(callback, state, operation, input);
      }

      public MetaObject End_call(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_call();
      }

      #endif

      public MetaObject call(MetaOperation operation, MetaObject input)
      {
        #if !SILVERLIGHT
        send_call(operation, input);
        return recv_call();

        #else
        var asyncResult = Begin_call(null, null, operation, input);
        return End_call(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_call(AsyncCallback callback, object state, MetaOperation operation, MetaObject input)
      #else
      public void send_call(MetaOperation operation, MetaObject input)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("call", TMessageType.Call, seqid_));
        call_args args = new call_args();
        args.Operation = operation;
        args.Input = input;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MetaObject recv_call()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        call_result result = new call_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.argEx) {
          throw result.ArgEx;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        if (result.__isset.cEx) {
          throw result.CEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "call failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getName"] = getName_Process;
        processMap_["getDisplayName"] = getDisplayName_Process;
        processMap_["getDescription"] = getDescription_Process;
        processMap_["ping"] = ping_Process;
        processMap_["getOperations"] = getOperations_Process;
        processMap_["call"] = call_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getName_args args = new getName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getName_result result = new getName_result();
        try {
          result.Success = iface_.getName();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDisplayName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDisplayName_args args = new getDisplayName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDisplayName_result result = new getDisplayName_result();
        try {
          result.Success = iface_.getDisplayName();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDescription_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDescription_args args = new getDescription_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDescription_result result = new getDescription_result();
        try {
          result.Success = iface_.getDescription();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getDescription", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        try {
          iface_.ping();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getOperations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getOperations_args args = new getOperations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getOperations_result result = new getOperations_result();
        try {
          result.Success = iface_.getOperations();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getOperations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void call_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        call_args args = new call_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        call_result result = new call_result();
        try {
          result.Success = iface_.call(args.Operation, args.Input);
        } catch (ArgumentException argEx) {
          result.ArgEx = argEx;
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        } catch (CanceledException cEx) {
          result.CEx = cEx;
        }
        oprot.WriteMessageBegin(new TMessage("call", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getName_args : TBase
    {

      public getName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getName_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getName_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getName_result : TBase
    {
      private string _success;
      private ServiceException _sEx;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sEx;
      }

      public getName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDisplayName_args : TBase
    {

      public getDisplayName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDisplayName_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDisplayName_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDisplayName_result : TBase
    {
      private string _success;
      private ServiceException _sEx;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sEx;
      }

      public getDisplayName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDisplayName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDisplayName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDescription_args : TBase
    {

      public getDescription_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDescription_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDescription_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDescription_result : TBase
    {
      private string _success;
      private ServiceException _sEx;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sEx;
      }

      public getDescription_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDescription_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDescription_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {
      private ServiceException _sEx;

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sEx;
      }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append("SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOperations_args : TBase
    {

      public getOperations_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOperations_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOperations_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getOperations_result : TBase
    {
      private List<MetaOperation> _success;
      private ServiceException _sEx;

      public List<MetaOperation> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sEx;
      }

      public getOperations_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MetaOperation>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    MetaOperation _elem2 = new MetaOperation();
                    _elem2 = new MetaOperation();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getOperations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MetaOperation _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getOperations_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class call_args : TBase
    {
      private MetaOperation _operation;
      private MetaObject _input;

      public MetaOperation Operation
      {
        get
        {
          return _operation;
        }
        set
        {
          __isset.operation = true;
          this._operation = value;
        }
      }

      public MetaObject Input
      {
        get
        {
          return _input;
        }
        set
        {
          __isset.input = true;
          this._input = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool operation;
        public bool input;
      }

      public call_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Operation = new MetaOperation();
                Operation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Input = new MetaObject();
                Input.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("call_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Operation != null && __isset.operation) {
          field.Name = "operation";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Operation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Input != null && __isset.input) {
          field.Name = "input";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Input.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("call_args(");
        sb.Append("Operation: ");
        sb.Append(Operation== null ? "<null>" : Operation.ToString());
        sb.Append(",Input: ");
        sb.Append(Input== null ? "<null>" : Input.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class call_result : TBase
    {
      private MetaObject _success;
      private ArgumentException _argEx;
      private ServiceException _sEx;
      private CanceledException _cEx;

      public MetaObject Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ArgumentException ArgEx
      {
        get
        {
          return _argEx;
        }
        set
        {
          __isset.argEx = true;
          this._argEx = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }

      public CanceledException CEx
      {
        get
        {
          return _cEx;
        }
        set
        {
          __isset.cEx = true;
          this._cEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool argEx;
        public bool sEx;
        public bool cEx;
      }

      public call_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MetaObject();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                ArgEx = new ArgumentException();
                ArgEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                CEx = new CanceledException();
                CEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("call_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.argEx) {
          if (ArgEx != null) {
            field.Name = "ArgEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ArgEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.cEx) {
          if (CEx != null) {
            field.Name = "CEx";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            CEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("call_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",ArgEx: ");
        sb.Append(ArgEx== null ? "<null>" : ArgEx.ToString());
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(",CEx: ");
        sb.Append(CEx== null ? "<null>" : CEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}

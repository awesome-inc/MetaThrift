/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MetaThrift
{
  public partial class MetaBroker {
    public interface Iface : MetaService.Iface {
      void bind(MetaServiceInfo serviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_bind(AsyncCallback callback, object state, MetaServiceInfo serviceInfo);
      void End_bind(IAsyncResult asyncResult);
      #endif
      void unbind(string serviceName);
      #if SILVERLIGHT
      IAsyncResult Begin_unbind(AsyncCallback callback, object state, string serviceName);
      void End_unbind(IAsyncResult asyncResult);
      #endif
      MetaServiceInfo getInfo(string serviceName);
      #if SILVERLIGHT
      IAsyncResult Begin_getInfo(AsyncCallback callback, object state, string serviceName);
      MetaServiceInfo End_getInfo(IAsyncResult asyncResult);
      #endif
      List<MetaServiceInfo> getInfos();
      #if SILVERLIGHT
      IAsyncResult Begin_getInfos(AsyncCallback callback, object state);
      List<MetaServiceInfo> End_getInfos(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MetaService.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_bind(AsyncCallback callback, object state, MetaServiceInfo serviceInfo)
      {
        return send_bind(callback, state, serviceInfo);
      }

      public void End_bind(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_bind();
      }

      #endif

      public void bind(MetaServiceInfo serviceInfo)
      {
        #if !SILVERLIGHT
        send_bind(serviceInfo);
        recv_bind();

        #else
        var asyncResult = Begin_bind(null, null, serviceInfo);
        End_bind(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_bind(AsyncCallback callback, object state, MetaServiceInfo serviceInfo)
      #else
      public void send_bind(MetaServiceInfo serviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("bind", TMessageType.Call, seqid_));
        bind_args args = new bind_args();
        args.ServiceInfo = serviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_bind()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        bind_result result = new bind_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.argEx) {
          throw result.ArgEx;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_unbind(AsyncCallback callback, object state, string serviceName)
      {
        return send_unbind(callback, state, serviceName);
      }

      public void End_unbind(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_unbind();
      }

      #endif

      public void unbind(string serviceName)
      {
        #if !SILVERLIGHT
        send_unbind(serviceName);
        recv_unbind();

        #else
        var asyncResult = Begin_unbind(null, null, serviceName);
        End_unbind(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_unbind(AsyncCallback callback, object state, string serviceName)
      #else
      public void send_unbind(string serviceName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("unbind", TMessageType.Call, seqid_));
        unbind_args args = new unbind_args();
        args.ServiceName = serviceName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_unbind()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unbind_result result = new unbind_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.argEx) {
          throw result.ArgEx;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getInfo(AsyncCallback callback, object state, string serviceName)
      {
        return send_getInfo(callback, state, serviceName);
      }

      public MetaServiceInfo End_getInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getInfo();
      }

      #endif

      public MetaServiceInfo getInfo(string serviceName)
      {
        #if !SILVERLIGHT
        send_getInfo(serviceName);
        return recv_getInfo();

        #else
        var asyncResult = Begin_getInfo(null, null, serviceName);
        return End_getInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getInfo(AsyncCallback callback, object state, string serviceName)
      #else
      public void send_getInfo(string serviceName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getInfo", TMessageType.Call, seqid_));
        getInfo_args args = new getInfo_args();
        args.ServiceName = serviceName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MetaServiceInfo recv_getInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInfo_result result = new getInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.argEx) {
          throw result.ArgEx;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getInfos(AsyncCallback callback, object state)
      {
        return send_getInfos(callback, state);
      }

      public List<MetaServiceInfo> End_getInfos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getInfos();
      }

      #endif

      public List<MetaServiceInfo> getInfos()
      {
        #if !SILVERLIGHT
        send_getInfos();
        return recv_getInfos();

        #else
        var asyncResult = Begin_getInfos(null, null);
        return End_getInfos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getInfos(AsyncCallback callback, object state)
      #else
      public void send_getInfos()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getInfos", TMessageType.Call, seqid_));
        getInfos_args args = new getInfos_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MetaServiceInfo> recv_getInfos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInfos_result result = new getInfos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sEx) {
          throw result.SEx;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInfos failed: unknown result");
      }

    }
    public class Processor : MetaService.Processor, TProcessor {
      public Processor(Iface iface) : base(iface)
      {
        iface_ = iface;
        processMap_["bind"] = bind_Process;
        processMap_["unbind"] = unbind_Process;
        processMap_["getInfo"] = getInfo_Process;
        processMap_["getInfos"] = getInfos_Process;
      }

      private Iface iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void bind_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        bind_args args = new bind_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        bind_result result = new bind_result();
        try {
          iface_.bind(args.ServiceInfo);
        } catch (ArgumentException argEx) {
          result.ArgEx = argEx;
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("bind", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unbind_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unbind_args args = new unbind_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unbind_result result = new unbind_result();
        try {
          iface_.unbind(args.ServiceName);
        } catch (ArgumentException argEx) {
          result.ArgEx = argEx;
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("unbind", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInfo_args args = new getInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInfo_result result = new getInfo_result();
        try {
          result.Success = iface_.getInfo(args.ServiceName);
        } catch (ArgumentException argEx) {
          result.ArgEx = argEx;
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getInfos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInfos_args args = new getInfos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInfos_result result = new getInfos_result();
        try {
          result.Success = iface_.getInfos();
        } catch (ServiceException sEx) {
          result.SEx = sEx;
        }
        oprot.WriteMessageBegin(new TMessage("getInfos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bind_args : TBase
    {
      private MetaServiceInfo _serviceInfo;

      public MetaServiceInfo ServiceInfo
      {
        get
        {
          return _serviceInfo;
        }
        set
        {
          __isset.serviceInfo = true;
          this._serviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceInfo;
      }

      public bind_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ServiceInfo = new MetaServiceInfo();
                ServiceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bind_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ServiceInfo != null && __isset.serviceInfo) {
          field.Name = "serviceInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ServiceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bind_args(");
        sb.Append("ServiceInfo: ");
        sb.Append(ServiceInfo== null ? "<null>" : ServiceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class bind_result : TBase
    {
      private ArgumentException _argEx;
      private ServiceException _sEx;

      public ArgumentException ArgEx
      {
        get
        {
          return _argEx;
        }
        set
        {
          __isset.argEx = true;
          this._argEx = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool argEx;
        public bool sEx;
      }

      public bind_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ArgEx = new ArgumentException();
                ArgEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("bind_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.argEx) {
          if (ArgEx != null) {
            field.Name = "ArgEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ArgEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("bind_result(");
        sb.Append("ArgEx: ");
        sb.Append(ArgEx== null ? "<null>" : ArgEx.ToString());
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unbind_args : TBase
    {
      private string _serviceName;

      public string ServiceName
      {
        get
        {
          return _serviceName;
        }
        set
        {
          __isset.serviceName = true;
          this._serviceName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceName;
      }

      public unbind_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ServiceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unbind_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ServiceName != null && __isset.serviceName) {
          field.Name = "serviceName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ServiceName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unbind_args(");
        sb.Append("ServiceName: ");
        sb.Append(ServiceName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unbind_result : TBase
    {
      private ArgumentException _argEx;
      private ServiceException _sEx;

      public ArgumentException ArgEx
      {
        get
        {
          return _argEx;
        }
        set
        {
          __isset.argEx = true;
          this._argEx = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool argEx;
        public bool sEx;
      }

      public unbind_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ArgEx = new ArgumentException();
                ArgEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unbind_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.argEx) {
          if (ArgEx != null) {
            field.Name = "ArgEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ArgEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unbind_result(");
        sb.Append("ArgEx: ");
        sb.Append(ArgEx== null ? "<null>" : ArgEx.ToString());
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfo_args : TBase
    {
      private string _serviceName;

      public string ServiceName
      {
        get
        {
          return _serviceName;
        }
        set
        {
          __isset.serviceName = true;
          this._serviceName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceName;
      }

      public getInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ServiceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ServiceName != null && __isset.serviceName) {
          field.Name = "serviceName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ServiceName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getInfo_args(");
        sb.Append("ServiceName: ");
        sb.Append(ServiceName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfo_result : TBase
    {
      private MetaServiceInfo _success;
      private ArgumentException _argEx;
      private ServiceException _sEx;

      public MetaServiceInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ArgumentException ArgEx
      {
        get
        {
          return _argEx;
        }
        set
        {
          __isset.argEx = true;
          this._argEx = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool argEx;
        public bool sEx;
      }

      public getInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MetaServiceInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                ArgEx = new ArgumentException();
                ArgEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.argEx) {
          if (ArgEx != null) {
            field.Name = "ArgEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ArgEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",ArgEx: ");
        sb.Append(ArgEx== null ? "<null>" : ArgEx.ToString());
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfos_args : TBase
    {

      public getInfos_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInfos_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getInfos_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfos_result : TBase
    {
      private List<MetaServiceInfo> _success;
      private ServiceException _sEx;

      public List<MetaServiceInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ServiceException SEx
      {
        get
        {
          return _sEx;
        }
        set
        {
          __isset.sEx = true;
          this._sEx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sEx;
      }

      public getInfos_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MetaServiceInfo>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    MetaServiceInfo _elem6 = new MetaServiceInfo();
                    _elem6 = new MetaServiceInfo();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SEx = new ServiceException();
                SEx.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getInfos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MetaServiceInfo _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sEx) {
          if (SEx != null) {
            field.Name = "SEx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SEx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getInfos_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",SEx: ");
        sb.Append(SEx== null ? "<null>" : SEx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}

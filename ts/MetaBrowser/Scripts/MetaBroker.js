//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MetaBroker_bind_args = function(args) {
  this.serviceInfo = null;
  if (args) {
    if (args.serviceInfo !== undefined) {
      this.serviceInfo = args.serviceInfo;
    }
  }
};
MetaBroker_bind_args.prototype = {};
MetaBroker_bind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceInfo = new MetaServiceInfo();
        this.serviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_bind_args.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_bind_args');
  if (this.serviceInfo !== null && this.serviceInfo !== undefined) {
    output.writeFieldBegin('serviceInfo', Thrift.Type.STRUCT, 1);
    this.serviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_bind_result = function(args) {
  this.argEx = null;
  this.sEx = null;
  if (args instanceof ArgumentException) {
    this.argEx = args;
    return;
  }
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.argEx !== undefined) {
      this.argEx = args.argEx;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaBroker_bind_result.prototype = {};
MetaBroker_bind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argEx = new ArgumentException();
        this.argEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_bind_result.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_bind_result');
  if (this.argEx !== null && this.argEx !== undefined) {
    output.writeFieldBegin('argEx', Thrift.Type.STRUCT, 1);
    this.argEx.write(output);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 2);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_unbind_args = function(args) {
  this.serviceName = null;
  if (args) {
    if (args.serviceName !== undefined) {
      this.serviceName = args.serviceName;
    }
  }
};
MetaBroker_unbind_args.prototype = {};
MetaBroker_unbind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_unbind_args.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_unbind_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_unbind_result = function(args) {
  this.argEx = null;
  this.sEx = null;
  if (args instanceof ArgumentException) {
    this.argEx = args;
    return;
  }
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.argEx !== undefined) {
      this.argEx = args.argEx;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaBroker_unbind_result.prototype = {};
MetaBroker_unbind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argEx = new ArgumentException();
        this.argEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_unbind_result.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_unbind_result');
  if (this.argEx !== null && this.argEx !== undefined) {
    output.writeFieldBegin('argEx', Thrift.Type.STRUCT, 1);
    this.argEx.write(output);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 2);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_getInfo_args = function(args) {
  this.serviceName = null;
  if (args) {
    if (args.serviceName !== undefined) {
      this.serviceName = args.serviceName;
    }
  }
};
MetaBroker_getInfo_args.prototype = {};
MetaBroker_getInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_getInfo_args.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_getInfo_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_getInfo_result = function(args) {
  this.success = null;
  this.argEx = null;
  this.sEx = null;
  if (args instanceof ArgumentException) {
    this.argEx = args;
    return;
  }
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.argEx !== undefined) {
      this.argEx = args.argEx;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaBroker_getInfo_result.prototype = {};
MetaBroker_getInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MetaServiceInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argEx = new ArgumentException();
        this.argEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_getInfo_result.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_getInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argEx !== null && this.argEx !== undefined) {
    output.writeFieldBegin('argEx', Thrift.Type.STRUCT, 1);
    this.argEx.write(output);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 2);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_getInfos_args = function(args) {
};
MetaBroker_getInfos_args.prototype = {};
MetaBroker_getInfos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_getInfos_args.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_getInfos_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBroker_getInfos_result = function(args) {
  this.success = null;
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaBroker_getInfos_result.prototype = {};
MetaBroker_getInfos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new MetaServiceInfo();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaBroker_getInfos_result.prototype.write = function(output) {
  output.writeStructBegin('MetaBroker_getInfos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaBrokerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(MetaBrokerClient, MetaServiceClient)
MetaBrokerClient.prototype.bind = function(serviceInfo) {
  this.send_bind(serviceInfo);
  this.recv_bind();
};

MetaBrokerClient.prototype.send_bind = function(serviceInfo) {
  this.output.writeMessageBegin('bind', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaBroker_bind_args();
  args.serviceInfo = serviceInfo;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaBrokerClient.prototype.recv_bind = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaBroker_bind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.argEx) {
    throw result.argEx;
  }
  if (null !== result.sEx) {
    throw result.sEx;
  }
  return;
};
MetaBrokerClient.prototype.unbind = function(serviceName) {
  this.send_unbind(serviceName);
  this.recv_unbind();
};

MetaBrokerClient.prototype.send_unbind = function(serviceName) {
  this.output.writeMessageBegin('unbind', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaBroker_unbind_args();
  args.serviceName = serviceName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaBrokerClient.prototype.recv_unbind = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaBroker_unbind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.argEx) {
    throw result.argEx;
  }
  if (null !== result.sEx) {
    throw result.sEx;
  }
  return;
};
MetaBrokerClient.prototype.getInfo = function(serviceName) {
  this.send_getInfo(serviceName);
  return this.recv_getInfo();
};

MetaBrokerClient.prototype.send_getInfo = function(serviceName) {
  this.output.writeMessageBegin('getInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaBroker_getInfo_args();
  args.serviceName = serviceName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaBrokerClient.prototype.recv_getInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaBroker_getInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.argEx) {
    throw result.argEx;
  }
  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getInfo failed: unknown result';
};
MetaBrokerClient.prototype.getInfos = function() {
  this.send_getInfos();
  return this.recv_getInfos();
};

MetaBrokerClient.prototype.send_getInfos = function() {
  this.output.writeMessageBegin('getInfos', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaBroker_getInfos_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaBrokerClient.prototype.recv_getInfos = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaBroker_getInfos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getInfos failed: unknown result';
};

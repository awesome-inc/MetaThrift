//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ArgumentException = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(ArgumentException, Thrift.TException);
ArgumentException.prototype.name = 'ArgumentException';
ArgumentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArgumentException.prototype.write = function(output) {
  output.writeStructBegin('ArgumentException');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceException = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(ServiceException, Thrift.TException);
ServiceException.prototype.name = 'ServiceException';
ServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceException.prototype.write = function(output) {
  output.writeStructBegin('ServiceException');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CanceledException = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(CanceledException, Thrift.TException);
CanceledException.prototype.name = 'CanceledException';
CanceledException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CanceledException.prototype.write = function(output) {
  output.writeStructBegin('CanceledException');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaObject = function(args) {
  this.typeName = null;
  this.data = null;
  if (args) {
    if (args.typeName !== undefined) {
      this.typeName = args.typeName;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
MetaObject.prototype = {};
MetaObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaObject.prototype.write = function(output) {
  output.writeStructBegin('MetaObject');
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 1);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaOperation = function(args) {
  this.name = null;
  this.inputTypeName = null;
  this.outputTypeName = null;
  this.displayName = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.inputTypeName !== undefined) {
      this.inputTypeName = args.inputTypeName;
    }
    if (args.outputTypeName !== undefined) {
      this.outputTypeName = args.outputTypeName;
    }
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
MetaOperation.prototype = {};
MetaOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inputTypeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.outputTypeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaOperation.prototype.write = function(output) {
  output.writeStructBegin('MetaOperation');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.inputTypeName !== null && this.inputTypeName !== undefined) {
    output.writeFieldBegin('inputTypeName', Thrift.Type.STRING, 2);
    output.writeString(this.inputTypeName);
    output.writeFieldEnd();
  }
  if (this.outputTypeName !== null && this.outputTypeName !== undefined) {
    output.writeFieldBegin('outputTypeName', Thrift.Type.STRING, 3);
    output.writeString(this.outputTypeName);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaServiceInfo = function(args) {
  this.name = null;
  this.url = null;
  this.displayName = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
MetaServiceInfo.prototype = {};
MetaServiceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaServiceInfo.prototype.write = function(output) {
  output.writeStructBegin('MetaServiceInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 3);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


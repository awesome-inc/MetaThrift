//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MetaService_getName_args = function(args) {
};
MetaService_getName_args.prototype = {};
MetaService_getName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getName_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getName_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getName_result = function(args) {
  this.success = null;
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaService_getName_result.prototype = {};
MetaService_getName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getName_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getDisplayName_args = function(args) {
};
MetaService_getDisplayName_args.prototype = {};
MetaService_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getDisplayName_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getDisplayName_result = function(args) {
  this.success = null;
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaService_getDisplayName_result.prototype = {};
MetaService_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getDescription_args = function(args) {
};
MetaService_getDescription_args.prototype = {};
MetaService_getDescription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getDescription_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getDescription_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getDescription_result = function(args) {
  this.success = null;
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaService_getDescription_result.prototype = {};
MetaService_getDescription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getDescription_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getDescription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_ping_args = function(args) {
};
MetaService_ping_args.prototype = {};
MetaService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_ping_result = function(args) {
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaService_ping_result.prototype = {};
MetaService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_ping_result');
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getOperations_args = function(args) {
};
MetaService_getOperations_args.prototype = {};
MetaService_getOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getOperations_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getOperations_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_getOperations_result = function(args) {
  this.success = null;
  this.sEx = null;
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
  }
};
MetaService_getOperations_result.prototype = {};
MetaService_getOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new MetaOperation();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_getOperations_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_getOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 1);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_call_args = function(args) {
  this.operation = null;
  this.input = null;
  if (args) {
    if (args.operation !== undefined) {
      this.operation = args.operation;
    }
    if (args.input !== undefined) {
      this.input = args.input;
    }
  }
};
MetaService_call_args.prototype = {};
MetaService_call_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation = new MetaOperation();
        this.operation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new MetaObject();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_call_args.prototype.write = function(output) {
  output.writeStructBegin('MetaService_call_args');
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.STRUCT, 1);
    this.operation.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 2);
    this.input.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaService_call_result = function(args) {
  this.success = null;
  this.argEx = null;
  this.sEx = null;
  this.cEx = null;
  if (args instanceof ArgumentException) {
    this.argEx = args;
    return;
  }
  if (args instanceof ServiceException) {
    this.sEx = args;
    return;
  }
  if (args instanceof CanceledException) {
    this.cEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.argEx !== undefined) {
      this.argEx = args.argEx;
    }
    if (args.sEx !== undefined) {
      this.sEx = args.sEx;
    }
    if (args.cEx !== undefined) {
      this.cEx = args.cEx;
    }
  }
};
MetaService_call_result.prototype = {};
MetaService_call_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MetaObject();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argEx = new ArgumentException();
        this.argEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sEx = new ServiceException();
        this.sEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cEx = new CanceledException();
        this.cEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaService_call_result.prototype.write = function(output) {
  output.writeStructBegin('MetaService_call_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.argEx !== null && this.argEx !== undefined) {
    output.writeFieldBegin('argEx', Thrift.Type.STRUCT, 1);
    this.argEx.write(output);
    output.writeFieldEnd();
  }
  if (this.sEx !== null && this.sEx !== undefined) {
    output.writeFieldBegin('sEx', Thrift.Type.STRUCT, 2);
    this.sEx.write(output);
    output.writeFieldEnd();
  }
  if (this.cEx !== null && this.cEx !== undefined) {
    output.writeFieldBegin('cEx', Thrift.Type.STRUCT, 3);
    this.cEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MetaServiceClient.prototype = {};
MetaServiceClient.prototype.getName = function() {
  this.send_getName();
  return this.recv_getName();
};

MetaServiceClient.prototype.send_getName = function() {
  this.output.writeMessageBegin('getName', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_getName_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_getName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_getName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getName failed: unknown result';
};
MetaServiceClient.prototype.getDisplayName = function() {
  this.send_getDisplayName();
  return this.recv_getDisplayName();
};

MetaServiceClient.prototype.send_getDisplayName = function() {
  this.output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_getDisplayName_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_getDisplayName = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_getDisplayName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDisplayName failed: unknown result';
};
MetaServiceClient.prototype.getDescription = function() {
  this.send_getDescription();
  return this.recv_getDescription();
};

MetaServiceClient.prototype.send_getDescription = function() {
  this.output.writeMessageBegin('getDescription', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_getDescription_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_getDescription = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_getDescription_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDescription failed: unknown result';
};
MetaServiceClient.prototype.ping = function() {
  this.send_ping();
  this.recv_ping();
};

MetaServiceClient.prototype.send_ping = function() {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  return;
};
MetaServiceClient.prototype.getOperations = function() {
  this.send_getOperations();
  return this.recv_getOperations();
};

MetaServiceClient.prototype.send_getOperations = function() {
  this.output.writeMessageBegin('getOperations', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_getOperations_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_getOperations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_getOperations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getOperations failed: unknown result';
};
MetaServiceClient.prototype.call = function(operation, input) {
  this.send_call(operation, input);
  return this.recv_call();
};

MetaServiceClient.prototype.send_call = function(operation, input) {
  this.output.writeMessageBegin('call', Thrift.MessageType.CALL, this.seqid);
  var args = new MetaService_call_args();
  args.operation = operation;
  args.input = input;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

MetaServiceClient.prototype.recv_call = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MetaService_call_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.argEx) {
    throw result.argEx;
  }
  if (null !== result.sEx) {
    throw result.sEx;
  }
  if (null !== result.cEx) {
    throw result.cEx;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'call failed: unknown result';
};
